package views

import (
  "time"

	"link-society.com/flowg/internal/storage"

  "link-society.com/flowg/web/templates/components"
  "link-society.com/flowg/web/templates/layouts"
)

templ streamHead() {
  <script type="application/javascript" src="/static/js/apexcharts.min.js"></script>
  <script type="application/javascript">
    document.addEventListener('htmx:load', () => {
      const histogramElt  = document.getElementById('data_stream_histogram')
      const histogramData = JSON.parse(histogramElt.dataset.timeserie)

      if (window.chart !== undefined) {
        window.chart.destroy()
      }

      window.chart = new ApexCharts(histogramElt, {
        series: [
          {
            name: 'Logs',
            data: histogramData,
          },
        ],
        chart: {
          type: 'bar',
          width: '100%',
          height: 150,
          animations: {
            enabled: false,
          }
        },
        dataLabels: {
          enabled: false,
        },
        xaxis: {
          type: 'datetime',
        },
      })
      window.chart.render()

      const autoRefreshSelector = document.getElementById('data_stream_autorefresh')
      let autoRefreshToken = null

      const setupAutoRefresh = () => {
        const autoRefreshInterval = parseInt(autoRefreshSelector.value) * 1000

        if (autoRefreshToken) {
          clearTimeout(autoRefreshToken)
        }

        if (autoRefreshInterval > 0) {
          autoRefreshToken = setTimeout(
            () => {
              const form = document.getElementById('form_stream')

              const now = new Date()
              const YYYY = now.getFullYear()
              const mm = String(now.getMonth() + 1).padStart(2, '0')
              const dd = String(now.getDate()).padStart(2, '0')
              const HH = String(now.getHours()).padStart(2, '0')
              const MM = String(now.getMinutes()).padStart(2, '0')
              const SS = String(now.getSeconds()).padStart(2, '0')
              const to = `${YYYY}-${mm}-${dd}T${HH}:${MM}:${SS}`

              const inputTo = document.getElementById('data_stream_to')
              inputTo.value = to

              form.dispatchEvent(new Event('submit'))
            },
            autoRefreshInterval,
          )
        }
      }

      setupAutoRefresh()
      autoRefreshSelector.addEventListener('change', setupAutoRefresh)
    })
  </script>
}

type streamSideMenuProps struct {
  Streams      []string
  CurrentStream string
}

templ streamSideMenu(props streamSideMenuProps) {
  <div class="col s2 h-full flex flex-col">
    <div
      class="
        card-panel white
        p-0 mb-0 h-0
        flex-grow flex-shrink
        overflow-auto
      "
    >
      <div class="collection m-0">
        for _, stream := range props.Streams {
          if stream == props.CurrentStream {
            <a class="collection-item active" href="#">{stream}</a>
          } else {
            <a
              class="collection-item"
              href={templ.SafeURL("/web/streams/" + stream + "/")}
            >
              {stream}
            </a>
          }
        }
      </div>
    </div>
  </div>
}

templ streamNoData() {
  <div class="col s10 h-full flex flex-col">
    <div
      class="
        card-panel white
        p-0 mb-0 h-0
        flex-grow flex-shrink
      "
    >
      No stream found.
    </div>
  </div>
}

type StreamsProps struct {
  Streams       []string
  CurrentStream string

  LogEntries    []storage.LogEntry
  Fields        []string
  From          time.Time
  To            time.Time
  Filter        string
  AutoRefresh   string

  HistogramData string
}

templ Streams(props StreamsProps, notifications []string) {
  @layouts.Base(layouts.BaseProps{
    Head: streamHead(),
    CurrentNav: "streams",
    Notifications: notifications,
  }) {
    <div class="w-full h-full flex flex-col">
      <section class="row w-full mb-0 flex-grow">
        @streamSideMenu(streamSideMenuProps{
          Streams: props.Streams,
          CurrentStream: props.CurrentStream,
        })
        if props.CurrentStream == "" {
          @streamNoData()
        } else {
          @components.StreamViewer(components.StreamViewerProps{
            LogEntries:    props.LogEntries,
            Fields:        props.Fields,
            From:          props.From,
            To:            props.To,
            Filter:        props.Filter,
            AutoRefresh:   props.AutoRefresh,
            HistogramData: props.HistogramData,

            Notifications: nil,
          })
        }
      </section>
    </div>
  }
}
